package ooo.defcon2019.quals.veryandroidoso

class Solver {
    static int getSecretNumber(int n) {
        int fuck[] = new int[] {190, 204, 118, 29, 61, 80, 68, 171, 50, 9, 137, 170, 218, 171, 33, 81, 148, 136, 125, 46, 143, 47, 5, 109, 131, 1, 129, 252, 175, 65, 9, 42, 190, 204, 118, 29, 61, 80, 68, 171, 50, 9, 137, 170, 218, 171, 33, 81, 148, 136, 125, 46, 143, 47, 5, 109, 131, 1, 129, 252, 175, 65, 9, 42, 190, 204, 118, 29, 61, 80, 68, 171, 50, 9, 137, 170, 218, 171, 33, 81, 148, 136, 125, 46, 143, 47, 5, 109, 131, 1, 129, 252, 175, 65, 9, 42, 190, 204, 118, 29, 61, 80, 68, 171, 50, 9, 137, 170, 218, 171, 33, 81, 148, 136, 125, 46, 143, 47, 5, 109, 131, 1, 129, 252, 175, 65, 9, 42, 190, 204, 118, 29, 61, 80, 68, 171, 50, 9, 137, 170, 218, 171, 33, 81, 148, 136, 125, 46, 143, 47, 5, 109, 131, 1, 129, 252, 175, 65, 9, 42, 190, 204, 118, 29, 61, 80, 68, 171, 50, 9, 137, 170, 218, 171, 33, 81, 148, 136, 125, 46, 143, 47, 5, 109, 131, 1, 129, 252, 175, 65, 9, 42, 190, 204, 118, 29, 61, 80, 68, 171, 50, 9, 137, 170, 218, 171, 33, 81, 148, 136, 125, 46, 143, 47, 5, 109, 131, 1, 129, 252, 175, 65, 9, 42, 190, 204, 118, 29, 61, 80, 68, 171, 50, 9, 137, 170, 218, 171, 33, 81, 148, 136, 125, 46, 143, 47, 5, 109, 131, 1, 129, 252, 175, 65, 9, 42, };
        return fuck[n];
    }


    public static int scramble(final int n) {
        final int n2 = (int)sleep(500) - 499;
        int shit = (int)Math.round(Math.sqrt(n2 * 4 * n2) / n2); // basically always 2?
        return (n + shit + 321) % 256;
    }

    static long sleep(final int n) {
        // final long nanoTime = System.nanoTime();
        // final long n2 = n;
        // try {
        //     Thread.sleep(n2);
        // }
        // catch (InterruptedException ex) {
        //     throw new ArithmeticException("divide by zero");
        // }
        // return (int)((System.nanoTime() - nanoTime) / 1000000.0f) + 1;

        return n; // there's some random fluctuation ofc ? very weird
    }

    static {
        System.loadLibrary("native-lib");
    }
    public static native int m0(int var0, int var1);

    public static native int m1(int var0, int var1);

    public static native int m2(int var0, int var1);

    public static native int m3(int var0, int var1);

    public static native int m4(int var0, int var1);

    public static native int m5(int var0, int var1);

    public static native int m6(int var0, int var1);

    public static native int m7(int var0, int var1);

    public static native int m8(int var0, int var1);

    public static native void m9(int var0);

    static boolean solve(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final int n9) {
        final int scramble = scramble(13);
        int n10 = m0((new int[] {100, 190, 88, 240, 97, 216, 47, 243, 39, 18, 173, 144, 157, 114, 116, 250, 152, 150, 196, 175, 28, 179, 23, 213, 73, 66, 20, 228, 67, 200, 156, 7, 221, 210, 50, 233, 110, 32, 71, 194, 117, 220, 43, 113, 148, 247, 217, 185, 41, 177, 239, 12, 232, 101, 82, 178, 128, 191, 42, 172, 136, 81, 115, 251, 69, 89, 139, 48, 129, 63, 154, 125, 242, 95, 132, 143, 102, 29, 199, 10, 146, 79, 225, 149, 236, 245, 56, 105, 27, 235, 162, 201, 193, 208, 104, 96, 209, 155, 34, 68, 202, 169, 49, 13, 134, 45, 226, 255, 14, 52, 33, 62, 44, 186, 6, 121, 21, 244, 131, 64, 111, 123, 248, 124, 36, 9, 58, 112, 222, 130, 254, 120, 75, 224, 76, 145, 80, 231, 198, 219, 182, 24, 126, 40, 246, 192, 78, 166, 140, 158, 223, 57, 207, 90, 161, 54, 38, 252, 72, 203, 70, 85, 171, 107, 98, 4, 51, 188, 238, 15, 147, 237, 65, 214, 99, 183, 22, 5, 92, 141, 184, 30, 108, 60, 135, 118, 127, 205, 133, 159, 19, 197, 74, 17, 59, 138, 195, 119, 8, 25, 206, 55, 106, 91, 160, 122, 218, 37, 181, 211, 212, 234, 241, 46, 77, 170, 11, 109, 16, 249, 168, 230, 215, 174, 204, 164, 2, 253, 94, 31, 189, 35, 153, 180, 103, 142, 1, 137, 187, 84, 165, 26, 87, 93, 83, 86, 0, 151, 3, 167, 53, 176, 227, 163, 229, 61})[n],getSecretNumber(scramble));
        if ((n10 & 0xFF) != 0xAC) {
            return false;
        }
        final int scramble2 = scramble(scramble);
        int n11 = m1((new int[] {29, 131, 174, 82, 200, 183, 179, 143, 182, 216, 9, 79, 44, 203, 167, 6, 135, 62, 4, 58, 242, 84, 72, 175, 171, 126, 140, 188, 18, 250, 114, 205, 137, 142, 16, 163, 159, 24, 105, 154, 186, 209, 169, 116, 138, 206, 57, 219, 132, 234, 129, 127, 247, 28, 49, 178, 5, 37, 93, 148, 25, 238, 118, 50, 166, 102, 146, 231, 81, 86, 201, 33, 197, 181, 155, 133, 85, 224, 176, 208, 170, 99, 40, 38, 204, 194, 74, 222, 144, 145, 212, 161, 141, 7, 123, 92, 26, 185, 101, 119, 223, 164, 31, 172, 249, 43, 88, 8, 19, 61, 241, 76, 157, 47, 111, 130, 60, 120, 252, 90, 117, 207, 192, 189, 158, 23, 253, 199, 80, 106, 41, 160, 221, 233, 71, 0, 36, 32, 230, 246, 52, 248, 147, 150, 95, 87, 104, 34, 232, 229, 202, 63, 66, 39, 168, 108, 139, 22, 244, 75, 190, 98, 124, 237, 77, 193, 149, 11, 100, 240, 227, 42, 121, 162, 55, 215, 165, 48, 67, 211, 35, 56, 70, 54, 78, 14, 45, 187, 89, 184, 213, 255, 27, 96, 1, 69, 122, 125, 110, 217, 228, 91, 156, 113, 243, 65, 196, 64, 3, 128, 109, 12, 153, 173, 53, 94, 68, 97, 152, 151, 2, 73, 107, 236, 17, 46, 112, 177, 10, 103, 225, 254, 136, 245, 13, 218, 115, 239, 195, 214, 180, 134, 83, 30, 59, 20, 51, 235, 191, 226, 15, 21, 251, 210, 198, 220})[n2],getSecretNumber(scramble2));
        if ((n11 & 0xFF) != 0x6) {
            return false;
        }
        final int scramble3 = scramble(scramble2);
        int n12 = m2((new int[] {255, 30, 98, 78, 198, 151, 15, 171, 92, 236, 93, 136, 206, 220, 56, 156, 54, 50, 82, 112, 123, 14, 77, 12, 184, 214, 208, 145, 66, 40, 52, 224, 213, 134, 227, 250, 22, 114, 79, 143, 10, 55, 174, 28, 85, 221, 154, 248, 84, 175, 168, 144, 11, 32, 64, 207, 147, 58, 176, 111, 108, 142, 216, 187, 110, 195, 5, 219, 72, 235, 49, 120, 232, 46, 155, 23, 27, 185, 233, 57, 170, 18, 71, 203, 88, 196, 140, 223, 109, 131, 103, 26, 251, 48, 180, 83, 106, 115, 130, 16, 133, 44, 164, 241, 182, 70, 204, 9, 218, 107, 179, 188, 6, 160, 190, 13, 209, 230, 119, 197, 226, 124, 121, 240, 80, 163, 97, 38, 149, 94, 202, 243, 193, 238, 167, 138, 148, 17, 3, 51, 127, 210, 62, 205, 239, 126, 169, 63, 95, 228, 199, 186, 81, 53, 152, 67, 125, 0, 153, 99, 150, 25, 217, 229, 102, 69, 246, 90, 117, 244, 60, 178, 73, 234, 2, 181, 75, 20, 24, 21, 8, 35, 141, 165, 201, 237, 96, 211, 129, 159, 19, 189, 135, 158, 33, 104, 91, 116, 177, 47, 247, 137, 122, 173, 59, 113, 29, 245, 242, 128, 39, 86, 192, 252, 37, 61, 89, 200, 157, 68, 225, 139, 1, 254, 36, 146, 162, 42, 45, 166, 172, 65, 231, 31, 105, 222, 43, 212, 118, 34, 215, 74, 87, 253, 194, 249, 100, 41, 76, 101, 4, 191, 132, 183, 7, 161})[n3],getSecretNumber(scramble3));
        if ((n12 & 0xFB) != 0x92) {
            return false;
        }
        final int scramble4 = scramble(scramble3);
        int n13 = m3((new int[] {1, 223, 134, 163, 178, 59, 65, 116, 117, 17, 224, 122, 99, 85, 52, 63, 206, 131, 204, 32, 40, 177, 132, 133, 92, 101, 97, 230, 106, 144, 30, 73, 0, 153, 192, 107, 44, 123, 86, 233, 62, 164, 118, 80, 71, 179, 197, 184, 29, 108, 4, 58, 244, 235, 8, 209, 41, 28, 150, 199, 14, 94, 45, 203, 159, 51, 212, 222, 183, 157, 95, 66, 142, 34, 185, 61, 74, 26, 161, 39, 55, 248, 16, 180, 191, 247, 25, 129, 91, 54, 181, 88, 207, 193, 5, 216, 231, 121, 211, 174, 167, 255, 227, 176, 82, 137, 12, 38, 198, 109, 152, 250, 126, 169, 187, 33, 253, 87, 173, 221, 46, 182, 24, 84, 228, 239, 75, 19, 72, 112, 208, 251, 220, 254, 90, 218, 2, 64, 246, 50, 114, 156, 168, 160, 148, 68, 242, 130, 113, 171, 139, 76, 23, 49, 138, 6, 225, 241, 11, 213, 48, 196, 110, 146, 119, 202, 69, 237, 22, 93, 175, 154, 102, 120, 21, 57, 140, 9, 141, 162, 190, 60, 53, 205, 136, 158, 105, 145, 166, 115, 249, 77, 252, 70, 78, 226, 217, 37, 111, 127, 27, 243, 195, 128, 186, 83, 229, 96, 89, 81, 189, 219, 210, 15, 194, 147, 10, 245, 165, 98, 155, 240, 43, 214, 188, 232, 236, 201, 42, 125, 143, 100, 215, 103, 67, 36, 3, 47, 13, 124, 172, 20, 238, 7, 234, 135, 18, 151, 79, 149, 31, 56, 200, 104, 170, 35})[n4],getSecretNumber(scramble4));
        if ((n13 & 0xF7) != 0x61) {
            return false;
        }
        final int scramble5 = scramble(scramble4);
        int n14 = m4((new int[] {144, 158, 58, 155, 10, 130, 143, 78, 170, 39, 110, 250, 246, 7, 214, 235, 25, 202, 157, 89, 237, 131, 52, 233, 161, 245, 181, 184, 116, 26, 254, 159, 244, 101, 186, 248, 72, 70, 142, 205, 168, 134, 173, 3, 54, 222, 51, 104, 123, 34, 206, 2, 188, 73, 95, 11, 20, 38, 69, 113, 179, 183, 192, 30, 99, 215, 129, 6, 24, 133, 198, 98, 49, 92, 66, 106, 154, 118, 164, 145, 177, 121, 190, 84, 59, 172, 149, 75, 23, 151, 207, 19, 8, 15, 247, 37, 167, 255, 102, 226, 135, 100, 18, 176, 171, 4, 105, 111, 251, 9, 219, 88, 93, 213, 169, 16, 229, 57, 61, 35, 65, 238, 141, 216, 199, 182, 22, 230, 200, 42, 76, 225, 74, 166, 147, 242, 50, 103, 68, 193, 67, 28, 243, 162, 194, 45, 43, 17, 124, 31, 55, 21, 47, 197, 126, 122, 196, 136, 204, 79, 132, 32, 91, 140, 234, 236, 195, 125, 12, 109, 185, 0, 64, 137, 53, 241, 178, 138, 127, 112, 160, 71, 87, 48, 56, 120, 240, 175, 40, 150, 114, 119, 221, 146, 201, 228, 224, 44, 152, 227, 86, 156, 212, 62, 80, 96, 208, 63, 253, 108, 203, 165, 115, 128, 90, 210, 153, 1, 85, 41, 83, 13, 148, 232, 27, 97, 60, 107, 189, 218, 187, 211, 191, 163, 139, 239, 77, 209, 29, 223, 94, 117, 82, 81, 14, 217, 5, 33, 174, 180, 252, 231, 220, 36, 46, 249})[n5],getSecretNumber(scramble5));
        if ((n14 & 0xCA) != 0x82) {
            return false;
        }
        if ((n6 & 0x41) != 0x41) {
            return false;
        }
        // m5 not used?
        final int scramble6 = scramble(scramble5);
        int n15 = m6((new int[] {6, 112, 67, 152, 88, 74, 161, 124, 42, 100, 247, 70, 226, 19, 215, 61, 141, 186, 190, 129, 24, 255, 173, 131, 23, 180, 25, 27, 33, 84, 237, 245, 30, 45, 8, 122, 126, 133, 234, 114, 185, 89, 97, 203, 125, 10, 90, 213, 71, 99, 172, 196, 224, 208, 251, 206, 209, 142, 91, 239, 174, 176, 94, 0, 4, 75, 167, 222, 205, 146, 156, 108, 240, 199, 76, 238, 18, 51, 63, 228, 113, 16, 158, 182, 183, 69, 110, 9, 65, 120, 249, 204, 81, 233, 34, 62, 220, 216, 166, 162, 57, 13, 78, 192, 159, 7, 191, 171, 17, 188, 211, 218, 168, 246, 135, 128, 56, 225, 140, 232, 231, 107, 14, 11, 58, 153, 136, 201, 60, 36, 132, 243, 111, 73, 163, 144, 164, 39, 236, 137, 77, 160, 47, 241, 87, 66, 200, 223, 170, 250, 37, 103, 92, 157, 96, 105, 217, 28, 139, 53, 93, 82, 179, 130, 195, 35, 2, 26, 59, 229, 101, 116, 147, 109, 40, 44, 214, 184, 235, 80, 154, 79, 21, 43, 119, 207, 193, 104, 102, 244, 22, 85, 68, 106, 202, 151, 254, 41, 145, 15, 98, 219, 49, 117, 143, 5, 48, 72, 86, 20, 198, 12, 253, 248, 1, 118, 242, 177, 29, 175, 148, 227, 121, 115, 50, 134, 123, 3, 83, 38, 194, 54, 230, 127, 210, 64, 189, 165, 149, 181, 252, 212, 32, 95, 187, 155, 150, 55, 178, 46, 221, 169, 31, 52, 138, 197})[n7],getSecretNumber(scramble6));
        if ((n15 & 0xFF) != 0xEC) {
            return false;
        }
        final int scramble7 = scramble(scramble6);
        // careful, this uses some nativelib array
        int n16 = m7((new int[] {208, 168, 97, 242, 78, 60, 100, 128, 232, 152, 127, 115, 253, 36, 174, 209, 181, 159, 88, 165, 19, 212, 211, 111, 26, 12, 229, 43, 8, 136, 199, 240, 135, 178, 44, 48, 82, 125, 254, 195, 173, 207, 121, 233, 68, 84, 52, 215, 137, 158, 154, 69, 186, 133, 51, 180, 80, 126, 144, 226, 40, 2, 66, 38, 244, 171, 67, 118, 57, 247, 112, 18, 138, 231, 202, 73, 201, 179, 85, 119, 116, 141, 90, 161, 238, 162, 204, 224, 81, 103, 214, 203, 198, 184, 92, 147, 105, 221, 11, 134, 70, 95, 27, 166, 24, 71, 185, 46, 172, 237, 39, 123, 76, 91, 228, 108, 74, 206, 87, 197, 50, 35, 15, 25, 7, 164, 219, 130, 54, 188, 213, 120, 61, 250, 189, 217, 241, 230, 55, 246, 192, 96, 94, 89, 218, 245, 176, 98, 75, 102, 194, 47, 101, 58, 132, 182, 234, 190, 223, 45, 150, 107, 86, 64, 20, 49, 23, 210, 251, 21, 59, 72, 104, 53, 155, 113, 106, 131, 6, 14, 3, 255, 17, 225, 143, 28, 167, 93, 196, 16, 129, 65, 200, 41, 29, 235, 149, 30, 169, 79, 33, 32, 5, 160, 110, 175, 1, 140, 109, 170, 183, 42, 99, 63, 157, 117, 151, 56, 124, 236, 177, 216, 156, 227, 4, 248, 37, 0, 9, 220, 31, 243, 148, 77, 114, 145, 10, 13, 139, 249, 252, 22, 122, 193, 34, 83, 222, 191, 62, 239, 205, 187, 163, 146, 142, 153})[n8],getSecretNumber(scramble7));
        if ((n16 & 0xFF) != 0x8E) {
            return false;
        }
        m9(n + n2 + n3 + n4 + n5 + n6 + n7 * n8); // careful, this fucks up the global s4 in the nativelib
        final int scramble8 = scramble(scramble7 + n8);
        // careful, this depends on the global s4 in the nativelib
        int n17 = m8((new int[] {74, 42, 108, 90, 10, 82, 182, 2, 156, 188, 147, 187, 66, 137, 18, 140, 44, 115, 26, 64, 255, 229, 204, 50, 153, 53, 30, 101, 161, 145, 136, 155, 159, 78, 11, 142, 131, 226, 68, 233, 109, 62, 88, 99, 94, 19, 114, 100, 39, 138, 237, 144, 143, 98, 251, 246, 146, 33, 199, 91, 171, 195, 200, 192, 126, 248, 38, 35, 29, 205, 230, 71, 166, 176, 239, 197, 6, 217, 25, 209, 241, 152, 202, 93, 117, 13, 228, 86, 80, 207, 96, 21, 48, 196, 224, 102, 58, 149, 133, 89, 232, 157, 106, 125, 132, 7, 63, 60, 165, 254, 9, 116, 59, 208, 216, 111, 173, 105, 84, 201, 151, 253, 123, 220, 69, 225, 236, 24, 22, 242, 16, 194, 31, 110, 193, 36, 20, 61, 150, 167, 162, 184, 190, 127, 72, 234, 172, 141, 175, 54, 8, 174, 5, 206, 168, 45, 67, 43, 148, 250, 51, 87, 103, 81, 119, 73, 189, 163, 214, 178, 221, 227, 4, 23, 130, 240, 120, 55, 177, 85, 243, 247, 249, 180, 231, 52, 223, 218, 183, 34, 46, 128, 70, 77, 65, 32, 97, 203, 49, 95, 219, 56, 185, 215, 15, 124, 37, 238, 12, 210, 1, 244, 76, 57, 211, 129, 75, 28, 212, 3, 113, 121, 107, 169, 92, 170, 135, 154, 181, 41, 213, 222, 112, 164, 252, 0, 134, 27, 14, 40, 118, 245, 235, 191, 104, 17, 79, 186, 198, 179, 83, 158, 139, 47, 122, 160})[n9],getSecretNumber(scramble8));
        return (n17 & 0xFF) == 0x67 && (getSecretNumber(n) * (long)getSecretNumber(n2) * getSecretNumber(n3) * getSecretNumber(n4) * getSecretNumber(n5) * getSecretNumber(n6) * getSecretNumber(n7) + n8 + getSecretNumber(n9)) % 144L == 37L;
    }

    public static void main(String[] args) {
        System.out.println(m1(1,1));
    }
}